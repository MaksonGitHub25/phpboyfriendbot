const roflArray = require('./assets/rofls');
const answerForUsers = require('./assets/answerForUsersKtoI');

require('dotenv').config();
const fs = require('fs');
const TelegramBot = require('node-telegram-bot-api');

const DATABASE_PATH = './database/receiveMessages.json';
const TOKEN = process.env.TOKEN;

const bot = new TelegramBot(TOKEN, { polling: true });


bot.onText(/\/rofl/, msg => {
  const chatId = msg.chat.id;
  const messageId = msg.message_id;

  const randomNumber = Math.floor(Math.random() * roflArray.length);
  const randomRofl = roflArray[randomNumber];

  bot.deleteMessage(chatId, messageId);
  bot.sendMessage(chatId, randomRofl);
});

bot.onText(/\/ne_umnichai/, msg => {
  const chatId = msg.chat.id;
  const messageId = msg.message_id;

  const messageForUmniki = `–ù–µ—Ç –Ω–∏—á–µ–≥–æ —É—Ç–æ–º–∏—Ç–µ–ª—å–Ω–µ–µ, —á–µ–º –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø—Ä–∏ —Ç–æ–º, –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–≤–æ–π —É–º. –í –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ —É–º–∞ –Ω–µ—Ç.
(–°) –≠—Ä–∏—Ö –ú–∞—Ä–∏—è –†–µ–º–∞—Ä–∫`;

  bot.deleteMessage(chatId, messageId);
  bot.sendMessage(chatId, messageForUmniki);
});

bot.onText(/\/kto_i/, msg => {
  const chatId = msg.chat.id;
  const messageId = msg.message_id;
  const senderUserName = msg.from.username;

  const messageForUser = answerForUsers[senderUserName];

  bot.deleteMessage(chatId, messageId);
  bot.sendMessage(
    chatId,
    messageForUser !== undefined ? messageForUser : answerForUsers['unknown']
  );
});

bot.on('document', msg => {
  const chatId = msg.chat.id;

  bot.sendMessage(chatId, '–ú–º–º–º–º, –¥–æ–º–∞—à–µ—á–∫–∞, —Å–ø–∞—Å–∏–±–æ —Ç–µ–±–µ üòò');
});

bot.onText(/\/receive (.+)/, (msg, match) => {
  const chatId = msg.chat.id;
  const senderUserName = msg.from.username;
  const messageDate = new Date().toLocaleString(msg.date);
  const messageId = msg.message_id;
  const receiveMessage = match[1];
  const chatType = msg.chat.type;

  const message = {
    sender: senderUserName,
    chatType: chatType,
    date: messageDate,
    chat: chatId,
    text: receiveMessage
  };

  const oldMessages =
    fs.readFileSync(DATABASE_PATH, 'utf-8') || '[]';

  const messages = JSON.parse(oldMessages);
  messages.push(message);

  fs.writeFileSync(DATABASE_PATH, JSON.stringify(messages));

  bot.deleteMessage(chatId, messageId);
  bot.sendMessage(chatId, '–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!');
});

bot.onText(/\/show_all_received_message/, msg => {
  const chatId = msg.chat.id;
  const messageId = msg.message_id;

  const data = fs.readFileSync(DATABASE_PATH, 'utf-8');
  const messages = JSON.parse(data);

  let sendingText = '';
  sendingText = sendingText.concat('--------------------------------');
  messages.map(message => {
    sendingText = sendingText.concat(`--------------------------------
-   –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: ${message.sender}
-   ID —á–∞—Ç–∞: ${message.chat}
-   –¢–∏–ø —á–∞—Ç–∞: ${message.chatType}
-   –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: ${message.text}
-   –î–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${message.date}
--------------------------------`);
  });
  sendingText = sendingText.concat('--------------------------------');

  bot.deleteMessage(chatId, messageId);
  bot.sendMessage(chatId, sendingText);
});
